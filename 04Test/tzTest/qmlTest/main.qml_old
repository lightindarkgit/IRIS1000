import QtQuick 2.5
import QtQuick.Window 2.2
import QtQuick.Controls 1.1
import QtQuick.Enterprise.VirtualKeyboard 2.0
//import an.qt.testclass 1.0

Window {
    id: window1
    visible: true
    width: 1280
    height: 720
    title: qsTr("中科虹霸")

   Item {
        id: itme
        x: 280
        y: 280
        width: parent.width
        height: parent.height
        rotation:270

        //        TestClass {
        //            id:testcls;
        //        }               

        Text {
            id:username;
            width: 70
            height: 40;
            x:324
            y: 647
            font.pixelSize: 20;
            text: "用户名:";
        }

        TextInput {
            id: usernameInput;
            width: 50;
            height: 40;
            x: 473
            y: 645
            font.pixelSize: 20;
            text: "username";
        }

        Button {
            id:openIrisBtn;
            width: 100;
            height: 40;
            x:557
            y: 642
            text: "打开OV2710设备";
            onClicked: {
                qPro.slotOnBtnOpenDevClicked();
            }
        }
        Button {
            id:openRGBBtn;
            width: 100;
            height: 40;
            x:833
            y: 640
            text: "打开OV5640设备";
            onClicked: {
                qPro.slotOnBtnOpenRGBDevClicked();
            }
        }

//        Button {
//            id:closeIrisBtn;
//            width: 100;
//            height: 40;
//            x:688
//            y: 640
//            text: "关闭OV2710设备";
//        }

//        Button {
//            id:closeRGBBtn;
//            width: 100;
//            height: 40;
//            x:833
//            y: 640
//            text: "关闭OV5640设备";
//        }

        Image {
            id: showImage
            x: 299
            y: 46
            width: 480
            height: 270
//              width: 480
//              height: 640
            cache: false
            //            source: "qrc:///image/res/pass.png"
            //            source: "image://windowScreen/"+Math.random();
            //            source: qPro.image
//            source: "image://screen"
        }

        Connections {
            target: qPro;
            onSigUpdateImage:{                
                showImage.source= "";
                showImage.source= "image://screen";//image:必须
//                showImage.sourceSize =
                //                showImage.source= "qrc:///image/res/pass.png";//更新图片
            }
        }

    }

//    Item {
//        x: 0
//        y: 0
//        width: parent.width
//        height: parent.height

//        Item {
//            id: appContainer
//            width: Screen.width < Screen.height ? parent.height : parent.width
//            height: Screen.width < Screen.height ? parent.width : parent.height
//            anchors.centerIn: parent
//            rotation: Screen.width < Screen.height ? 270 : 0

//            TextField {
//                id:textField;
//                width: 800;
//                height: 50;
//                y:10
//                anchors.horizontalCenter: parent.horizontalCenter;
//                font.pixelSize: 20;
//                text: "虚拟键盘测试";
//            }

//            /*  Keyboard input panel.

//                The keyboard is anchored to the bottom of the application.
//            */
//            InputPanel {
//                id: inputPanel
//                z: 99
//                y: appContainer.height
//                anchors.left: parent.left
//                anchors.right: parent.right
//                states: State {
//                    name: "visible"
//                    /*  The visibility of the InputPanel can be bound to the Qt.inputMethod.visible property,
//                        but then the handwriting input panel and the keyboard input panel can be visible
//                        at the same time. Here the visibility is bound to InputPanel.active property instead,
//                        which allows the handwriting panel to control the visibility when necessary.
//                    */
//                    when: inputPanel.active
//                    PropertyChanges {
//                        target: inputPanel
//                        y: appContainer.height - inputPanel.height
//                    }
//                }
//                transitions: Transition {
//                    from: ""
//                    to: "visible"
//                    reversible: true
//                    ParallelAnimation {
//                        NumberAnimation {
//                            properties: "y"
//                            duration: 250
//                            easing.type: Easing.InOutQuad
//                        }
//                    }
//                }
////                AutoScroller {}
//            }
//        }
//    }

}
