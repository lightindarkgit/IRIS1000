#pragma once
#ifndef MODELCFG_H_
#define MODELCFG_H_
#include <stdlib.h>
#include <vector>

#define KP_HOG_ARRAY_DD						16
#define KP_HOG_ARRAY_WW						4
#define KP_HOG_ARRAY_HH						4
#define KP_HOG_LENGTH						(KP_HOG_ARRAY_WW*KP_HOG_ARRAY_HH*KP_HOG_ARRAY_DD)
#define KP_HOG_FEATUTE_LENGTH				(KP_HOG_LENGTH*LandmarkPointsNum+1)

//char trainFilePath[] = "ibug_300W_large_face_landmark_dataset/";    //   F:/BaiduYunDownload/ibug_300W_large_face_landmark_dataset/


//平均形状，已经对齐到[-0.5, 0.5]的矩形框内
float mean_norm_shape[] = {-0.425447f,-0.420378f,-0.403986f,-0.378397f,-0.334865f,-0.267835f,-0.186091f,-0.0926207f,0.0171259f,0.124622f,0.217315f,0.298924f,0.364711f,0.40539f,0.424369f,0.433527f,
                           0.434302f,-0.346527f,-0.291047f,-0.219418f,-0.146317f,-0.0767238f,0.0728158f,0.145081f,0.216934f,0.287845f,0.34347f,0.00281427f,0.00441905f,
                           0.00584405f,0.00728284f,-0.0733598f,-0.0336527f,0.00845645f,0.0513711f,0.0896271f,-0.257595f,-0.214834f,-0.158869f,-0.114167f,
                           -0.162445f,-0.216635f,0.120275f,0.162891f,0.21818f,0.261672f,0.224722f,0.172206f,-0.152704f,-0.0922372f,-0.0317683f,0.00915638f,0.0552207f,
                           0.117148f,0.176954f,0.121837f,0.0623947f,0.0129873f,-0.0322064f,-0.0926682f,-0.127528f,-0.0314446f,0.0102627f,0.0570615f,0.151259f,
                           0.0582893f,0.0107967f,-0.0316032f,-0.0945562f,0.020082f,0.133867f,0.245261f,0.349792f,0.440875f,0.518436f,0.58143f,0.597349f,0.578498f,
                           0.513146f,0.433165f,0.339315f,0.232338f,0.117465f,0.00277241f,-0.11081f,-0.189491f,-0.233866f,-0.244346f,-0.23305f,-0.20614f,-0.211158f,
                           -0.241047f,-0.253345f,-0.245792f,-0.208503f,-0.119405f,-0.0422907f,0.0352936f,0.114162f,0.158849f,0.174848f,0.189675f,0.173255f,0.156922f,
                           -0.106242f,-0.135285f,-0.135007f,-0.0995828f,-0.0853928f,-0.0851771f,-0.104104f,-0.141082f,-0.143265f,-0.115788f,-0.0941629f,-0.0917073f,
                           0.30736f,0.279836f,0.26671f,0.276785f,0.265286f,0.276841f,0.299686f,0.359647f,0.385563f,0.391521f,0.388128f,0.364927f,0.311043f,0.30646f,
                           0.309391f,0.304039f,0.304872f,0.328162f,0.334493f,0.330795f};

//0 1 2 14 15 16这几个点索引一般不用
//姿态数据
float estimateHeadPose2dArray2[] = {
    0.139791f,27.4028f,7.02636f,
    -2.48207f,9.59384f,6.03758f,
    1.27402f,10.4795f,6.20801f,
    1.17406f,29.1886f,1.67768f,
    0.306761f,-103.832f,5.66238f,
    4.78663f,17.8726f,-15.3623f,
    -5.20016f,9.29488f,-11.2495f,
    -25.1704f,10.8649f,-29.4877f,
    -5.62572f,9.0871f,-12.0982f,
    -5.19707f,-8.25251f,13.3965f,
    -23.6643f,-13.1348f,29.4322f,
    67.239f,0.666896f,1.84304f,
    -2.83223f,4.56333f,-15.885f,
    -4.74948f,-3.79454f,12.7986f,
    -16.1f,1.47175f,4.03941f };

//估计姿态使用到的关键点
int HeadPosePointIndexs[] = {36,39,42,45,30,48,54};

//需要计算特征的landmark索引，通过一下12个点的HOG特征回归出68个点的梯度变化
int LandmarkLength1 = 12;
int IteraLandmarkIndex1[] = {3, 6, 8, 10, 13, 19, 24, 36, 45, 30, 48, 54};
int LandmarkLength2 = 12;
int IteraLandmarkIndex2[] = {3, 6, 8, 10, 13, 19, 24, 36, 45, 30, 48, 54};
int LandmarkLength3 = 12;
int IteraLandmarkIndex3[] = {3, 6, 8, 10, 13, 19, 24, 36, 45, 30, 48, 54};
int LandmarkLength4 = 20;
int IteraLandmarkIndex4[] = {3, 6, 8, 10, 13, 18, 20, 23, 25, 36, 39, 42, 45, 30, 31, 35, 48, 51, 54, 57};
int LandmarkLength5 = 20;
int IteraLandmarkIndex5[] = {3, 6, 8, 10, 13, 18, 20, 23, 25, 36, 39, 42, 45, 30, 31, 35, 48, 51, 54, 57};


//四次迭代
//int LandmarkLength1 = 12;
//int IteraLandmarkIndex1[] = {3, 6, 8, 10, 13, 19, 24, 36, 45, 30, 48, 54};
//int LandmarkLength2 = 20;
//int IteraLandmarkIndex2[] = {3, 6, 8, 10, 13, 18, 20, 23, 25, 36, 39, 42, 45, 30, 31, 35, 48, 51, 54, 57};
//int LandmarkLength3 = 20;
//int IteraLandmarkIndex3[] = {3, 6, 8, 10, 13, 18, 20, 23, 25, 36, 39, 42, 45, 30, 31, 35, 48, 51, 54, 57};
//int LandmarkLength4 = 38;
//int IteraLandmarkIndex4[] = {0,2,4,6,8,10,12,14,16,17,19,21,22,24,26,27,30,31,33,35,36,37,39,40,42,43,45,46,48,50,52,54,56,58,60,62,64,66};


//左右两只眼睛的索引
int eyes_indexs[4] = {36,39,42,45};

int extern_point_Length = 14;
int extern_point_indexs[] = {0,16,36,37,38,39,40,41,42,43,44,45,46,47};

////5次68个点的迭代
//int LandmarkLength1 = 68;
//int IteraLandmarkIndex1[68] = {0};
//int LandmarkLength2 = 68;
//int IteraLandmarkIndex2[68] = {0};
//int LandmarkLength3 = 68;
//int IteraLandmarkIndex3[68] = {0};
//int LandmarkLength4 = 68;
//int IteraLandmarkIndex4[68] = {0};
//int LandmarkLength5 = 68;
//int IteraLandmarkIndex5[68] = {0};



//左右眼睛的四个眼角，鼻尖点，左右两个嘴角，一共七个点，估计头部姿态，2*7+1维度的数据，最小二乘拟合出9个维度的数据，即一个3*3的旋转矩阵
//矩阵大小为15*9
float estimateHeadPoseMat[] = {  -0.258801f,-0.142125f,0.445513f,0.101524f,-0.0117096f,-0.119747f,-0.426367f,-0.0197618f,-0.143073f,
                                 -0.194121f,-0.210882f,0.0989902f,0.0822748f,-0.00544055f,0.0184441f,-0.0628809f,-0.0944775f,-0.162363f,
                                 0.173311f,-0.205982f,0.105287f,0.0767408f,0.0101697f,0.0156599f,-0.0632534f,0.0774872f,0.139928f,
                                 0.278776f,-0.109497f,0.537723f,0.0488799f,0.00548235f,0.111033f,-0.471475f,0.0280982f,0.157491f,
                                 0.0427104f,-0.348899f,-1.95092f,0.0493076f,0.0340635f,0.157101f,2.01808f,-0.0716708f,0.0860774f,
                                 -0.191908f,0.551951f,0.456261f,-0.174833f,-0.0202239f,-0.203346f,-0.575386f,0.105571f,-0.171957f,
                                 0.150051f,0.465426f,0.307133f,-0.183886f,-0.0123275f,0.0208533f,-0.4187f,-0.0252474f,0.0939203f,
                                 0.00521464f,0.229863f,0.0595028f,-0.480886f,-0.0684972f,0.43404f,-0.0206778f,-0.428706f,0.118848f,
                                 0.0125229f,0.140842f,0.115793f,-0.239542f,-0.0933311f,0.0913729f,-0.106839f,-0.0523733f,0.0697435f,
                                 0.030548f,-0.101407f,-0.0659365f,0.220726f,-0.113126f,0.0189044f,0.0785027f,-0.02235f,0.0964722f,
                                 0.0143054f,-0.274282f,-0.173696f,0.477843f,-0.073234f,0.297015f,0.180833f,-0.322039f,0.0855057f,
                                 0.117061f,-0.00704583f,0.0157153f,0.00142929f,-0.106156f,-1.29549f,-0.0134561f,1.22806f,0.048107f,
                                 -0.0663207f,0.0996722f,0.0374666f,-0.215455f,0.240434f,0.233645f,-0.0148478f,-0.144342f,-0.175324f,
                                 -0.113332f,-0.0876358f,0.011164f,0.23588f,0.213911f,0.2205f,-0.103526f,-0.258239f,-0.243352f,
                                 0.535077f,0.000906855f,-0.0336819f,0.015495f,0.586095f,-0.14663f,0.0643886f,-0.114478f,0.937324f};










#endif
